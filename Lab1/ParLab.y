-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParLab where
import AbsLab
import LexLab
import ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&' { PT _ (TS _ 4) }
  '&&' { PT _ (TS _ 5) }
  '(' { PT _ (TS _ 6) }
  ')' { PT _ (TS _ 7) }
  '*' { PT _ (TS _ 8) }
  '+' { PT _ (TS _ 9) }
  '++' { PT _ (TS _ 10) }
  '+=' { PT _ (TS _ 11) }
  ',' { PT _ (TS _ 12) }
  '-' { PT _ (TS _ 13) }
  '--' { PT _ (TS _ 14) }
  '-=' { PT _ (TS _ 15) }
  '->' { PT _ (TS _ 16) }
  '.' { PT _ (TS _ 17) }
  '/' { PT _ (TS _ 18) }
  ':' { PT _ (TS _ 19) }
  '::' { PT _ (TS _ 20) }
  ';' { PT _ (TS _ 21) }
  '<' { PT _ (TS _ 22) }
  '<<' { PT _ (TS _ 23) }
  '<=' { PT _ (TS _ 24) }
  '=' { PT _ (TS _ 25) }
  '==' { PT _ (TS _ 26) }
  '>' { PT _ (TS _ 27) }
  '>=' { PT _ (TS _ 28) }
  '>>' { PT _ (TS _ 29) }
  '?' { PT _ (TS _ 30) }
  '[' { PT _ (TS _ 31) }
  ']' { PT _ (TS _ 32) }
  'bool' { PT _ (TS _ 33) }
  'const' { PT _ (TS _ 34) }
  'do' { PT _ (TS _ 35) }
  'double' { PT _ (TS _ 36) }
  'else' { PT _ (TS _ 37) }
  'false' { PT _ (TS _ 38) }
  'for' { PT _ (TS _ 39) }
  'if' { PT _ (TS _ 40) }
  'inline' { PT _ (TS _ 41) }
  'int' { PT _ (TS _ 42) }
  'return' { PT _ (TS _ 43) }
  'struct' { PT _ (TS _ 44) }
  'throw' { PT _ (TS _ 45) }
  'true' { PT _ (TS _ 46) }
  'typedef' { PT _ (TS _ 47) }
  'using' { PT _ (TS _ 48) }
  'void' { PT _ (TS _ 49) }
  'while' { PT _ (TS _ 50) }
  '{' { PT _ (TS _ 51) }
  '||' { PT _ (TS _ 52) }
  '}' { PT _ (TS _ 53) }

L_integ  { PT _ (TI $$) }
L_doubl  { PT _ (TD $$) }
L_charac { PT _ (TC $$) }
L_quoted { PT _ (TL $$) }
L_Id { PT _ (T_Id $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }
Char    :: { Char }    : L_charac { (read ( $1)) :: Char }
String  :: { String }  : L_quoted {  $1 }
Id    :: { Id} : L_Id { Id ($1)}

Program :: { Program }
Program : ListDef { AbsLab.Prog (reverse $1) }
ListDef :: { [Def] }
ListDef : {- empty -} { [] } | ListDef Def { flip (:) $1 $2 }
Def :: { Def }
Def : Fun { AbsLab.DFun $1 }
    | 'inline' Fun { AbsLab.DInlFun $2 }
    | TDef ';' { AbsLab.DTDef $1 }
    | StmDec ';' { AbsLab.DVar $1 }
    | Struct ';' { AbsLab.DStruct $1 }
    | 'using' QConst ';' { AbsLab.DUsing $2 }
Fun :: { Fun }
Fun : Type Id '(' ListArgDec ')' ';' { AbsLab.FProto $1 $2 $4 }
    | Type Id '(' ListArgDec ')' '{' ListStm '}' { AbsLab.FDef $1 $2 $4 (reverse $7) }
ListArgDec :: { [ArgDec] }
ListArgDec : {- empty -} { [] }
           | ArgDec { (:[]) $1 }
           | ArgDec ',' ListArgDec { (:) $1 $3 }
TDef :: { TDef }
TDef : 'typedef' Type Id { AbsLab.Typedef $2 $3 }
Struct :: { Struct }
Struct : 'struct' Id '{' ListDec '}' { AbsLab.Structure $2 (reverse $4) }
ListDec :: { [Dec] }
ListDec : {- empty -} { [] } | ListDec Dec ';' { flip (:) $1 $2 }
Dec :: { Dec }
Dec : Type Id { AbsLab.DecSingle $1 $2 }
    | 'const' Type Id { AbsLab.DecConst $2 $3 }
    | Type Id '=' Exp { AbsLab.DecInit $1 $2 $4 }
    | 'const' Type Id '=' Exp { AbsLab.DecInitConst $2 $3 $5 }
ArgDec :: { ArgDec }
ArgDec : Dec { AbsLab.DecArg $1 }
       | Type { AbsLab.DecArgNoName $1 }
       | 'const' Type { AbsLab.DecArgCNoName $2 }
StmDec :: { StmDec }
StmDec : Dec { AbsLab.DecVar $1 }
       | Type Id ',' ListId { AbsLab.DecMultVar $1 $2 $4 }
ListId :: { [Id] }
ListId : Id { (:[]) $1 } | Id ',' ListId { (:) $1 $3 }
Stm :: { Stm }
Stm : Exp ';' { AbsLab.SExpr $1 }
    | StmDec ';' { AbsLab.SStmDec $1 }
    | 'return' Exp ';' { AbsLab.SReturn $2 }
    | 'while' '(' Exp ')' Stm { AbsLab.SWhile $3 $5 }
    | 'do' Stm 'while' '(' Exp ')' ';' { AbsLab.SDoWhile $2 $5 }
    | 'for' '(' StmDec ';' Exp ';' Exp ')' Stm { AbsLab.SFor $3 $5 $7 $9 }
    | 'if' '(' Exp ')' Stm { AbsLab.SIf $3 $5 }
    | 'if' '(' Exp ')' Stm 'else' Stm { AbsLab.SIfElse $3 $5 $7 }
    | '{' ListStm '}' { AbsLab.SBlock (reverse $2) }
    | TDef ';' { AbsLab.STDef $1 }
    | Struct ';' { AbsLab.SStruct $1 }
ListStm :: { [Stm] }
ListStm : {- empty -} { [] } | ListStm Stm { flip (:) $1 $2 }
Exp16 :: { Exp }
Exp16 : Integer { AbsLab.EInt $1 }
      | Double { AbsLab.EDouble $1 }
      | Char { AbsLab.EChar $1 }
      | ListString { AbsLab.EString $1 }
      | 'true' { AbsLab.ETrue }
      | 'false' { AbsLab.EFalse }
      | QConst { AbsLab.EConst $1 }
      | '(' Exp ')' { $2 }
Exp15 :: { Exp }
Exp15 : Id '[' Exp ']' { AbsLab.EIndex $1 $3 }
      | Id '(' ListExp ')' { AbsLab.ECall $1 $3 }
      | Exp16 { $1 }
Exp14 :: { Exp }
Exp14 : Exp14 '.' Exp15 { AbsLab.EMem $1 $3 }
      | Exp14 '->' Exp15 { AbsLab.EFAccs $1 $3 }
      | Exp15 '++' { AbsLab.EPostInc $1 }
      | Exp15 '--' { AbsLab.EPostDec $1 }
      | Exp15 { $1 }
Exp13 :: { Exp }
Exp13 : '++' Exp14 { AbsLab.EPreInc $2 }
      | '--' Exp14 { AbsLab.EPreDec $2 }
      | '*' Exp14 { AbsLab.EDeref $2 }
      | '!' Exp14 { AbsLab.ENot $2 }
      | '-' Exp14 { AbsLab.ENeg $2 }
      | Exp14 { $1 }
Exp12 :: { Exp }
Exp12 : Exp12 '*' Exp13 { AbsLab.EMul $1 $3 }
      | Exp12 '/' Exp13 { AbsLab.EDiv $1 $3 }
      | Exp12 '%' Exp13 { AbsLab.EMod $1 $3 }
      | Exp13 { $1 }
Exp11 :: { Exp }
Exp11 : Exp11 '+' Exp12 { AbsLab.EAdd $1 $3 }
      | Exp11 '-' Exp12 { AbsLab.ESub $1 $3 }
      | Exp12 { $1 }
Exp10 :: { Exp }
Exp10 : Exp10 '<<' Exp11 { AbsLab.EShiftL $1 $3 }
      | Exp10 '>>' Exp11 { AbsLab.EShiftR $1 $3 }
      | Exp11 { $1 }
Exp9 :: { Exp }
Exp9 : Exp9 '>' Exp10 { AbsLab.EGt $1 $3 }
     | Exp9 '<' Exp10 { AbsLab.ELt $1 $3 }
     | Exp9 '<=' Exp10 { AbsLab.ELeq $1 $3 }
     | Exp9 '>=' Exp10 { AbsLab.EGeq $1 $3 }
     | Exp10 { $1 }
Exp8 :: { Exp }
Exp8 : Exp8 '!=' Exp9 { AbsLab.ENeq $1 $3 }
     | Exp8 '==' Exp9 { AbsLab.EEq $1 $3 }
     | Exp9 { $1 }
Exp4 :: { Exp }
Exp4 : Exp4 '&&' Exp5 { AbsLab.EAnd $1 $3 } | Exp5 { $1 }
Exp3 :: { Exp }
Exp3 : Exp3 '||' Exp4 { AbsLab.EOr $1 $3 } | Exp4 { $1 }
Exp2 :: { Exp }
Exp2 : Exp3 '=' Exp2 { AbsLab.EAss $1 $3 }
     | Exp3 '-=' Exp2 { AbsLab.EAssDec $1 $3 }
     | Exp3 '+=' Exp2 { AbsLab.EAssInc $1 $3 }
     | Exp3 '?' Exp2 ':' Exp2 { AbsLab.EIfElse $1 $3 $5 }
     | Exp3 { $1 }
Exp1 :: { Exp }
Exp1 : 'throw' Exp2 { AbsLab.EThrow $2 } | Exp2 { $1 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }
ListString :: { [String] }
ListString : String { (:[]) $1 } | String ListString { (:) $1 $2 }
Exp :: { Exp }
Exp : Exp1 { $1 }
Exp5 :: { Exp }
Exp5 : Exp6 { $1 }
Exp6 :: { Exp }
Exp6 : Exp7 { $1 }
Exp7 :: { Exp }
Exp7 : Exp8 { $1 }
Const :: { Const }
Const : Id '<' ListType '>' { AbsLab.CTempl $1 $3 }
      | Id { AbsLab.CId $1 }
QConst :: { QConst }
QConst : ListConst { AbsLab.QCon $1 }
ListConst :: { [Const] }
ListConst : Const { (:[]) $1 } | Const '::' ListConst { (:) $1 $3 }
ListType :: { [Type] }
ListType : Type { (:[]) $1 } | Type ',' ListType { (:) $1 $3 }
Type :: { Type }
Type : 'int' { AbsLab.TInt }
     | 'double' { AbsLab.TDouble }
     | 'void' { AbsLab.TVoid }
     | 'bool' { AbsLab.TBool }
     | QConst { AbsLab.TConst $1 }
     | Type '&' { AbsLab.TRef $1 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

