

module AbsCpp where

-- Haskell module generated by the BNF converter




newtype Id = Id String deriving (Eq, Ord, Show, Read)
data Program = Prog [Def]
  deriving (Eq, Ord, Show, Read)

data Def
    = DFun Fun
    | DTDef TDef
    | DVar Var
    | DStruct Str
    | DUsing QConst
    | DInline Fun
  deriving (Eq, Ord, Show, Read)

data Fun = FProto Type Id [Arg] | FDef Type Id [Arg] [Stm]
  deriving (Eq, Ord, Show, Read)

data TDef = Typedef Type Id
  deriving (Eq, Ord, Show, Read)

data Str = Struct Id [Dec]
  deriving (Eq, Ord, Show, Read)

data Dec
    = DecSingle Type Id
    | DecConst Type Id
    | DecInit Type Id Exp
    | DecInitConst Type Id Exp
  deriving (Eq, Ord, Show, Read)

data Arg = ADec Dec | ANoname Type | ANonameConst Type
  deriving (Eq, Ord, Show, Read)

data Var = VDec Dec | VMult Type Id [Id]
  deriving (Eq, Ord, Show, Read)

data Stm
    = SExpr Exp
    | SVar Var
    | SRet Exp
    | SBlock [Stm]
    | SWhile Exp Stm
    | SDoWhile Stm Exp
    | SFor Var Exp Exp Stm
    | STDef TDef
    | SStruct Str
    | SIf Exp Stm
    | SIfElse Exp Stm Stm
  deriving (Eq, Ord, Show, Read)

data Exp
    = EInt Integer
    | EDbl Double
    | EChar Char
    | EStrLit [String]
    | EConst QConst
    | EIndex Id Exp
    | EFunCall Id [Exp]
    | EStrDot Exp Exp
    | EStrArr Exp Exp
    | EPostInc Exp
    | EDeref Exp
    | EPreInc Exp
    | ENegate Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | EMod Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | ELShift Exp Exp
    | ERShift Exp Exp
    | ELt Exp Exp
    | EGt Exp Exp
    | ELtEq Exp Exp
    | EGtEq Exp Exp
    | EEqual Exp Exp
    | EIneq Exp Exp
    | EAnd Exp Exp
    | EOr Exp Exp
    | EAssign Exp Exp
    | EAssignInc Exp Exp
    | EAssignDec Exp Exp
    | ETernary Exp Exp Exp
    | EThrtow Exp
  deriving (Eq, Ord, Show, Read)

data Const = CTempl Id [Type] | CId Id
  deriving (Eq, Ord, Show, Read)

data QConst = QCon [Const]
  deriving (Eq, Ord, Show, Read)

data Type
    = TVoid | TBool | TInt | TDoube | TConst QConst | TRef Type
  deriving (Eq, Ord, Show, Read)

