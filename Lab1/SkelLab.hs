module SkelLab where

-- Haskell module generated by the BNF converter

import AbsLab
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transId :: Id -> Result
transId x = case x of
  Id string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog defs -> failure x
transDef :: Def -> Result
transDef x = case x of
  DFun fun -> failure x
  DInlFun fun -> failure x
  DTDef tdef -> failure x
  DVar stmdec -> failure x
  DStruct struct -> failure x
  DUsing qconst -> failure x
transFun :: Fun -> Result
transFun x = case x of
  FProto type_ id argdecs -> failure x
  FDef type_ id argdecs stms -> failure x
transTDef :: TDef -> Result
transTDef x = case x of
  Typedef type_ id -> failure x
transStruct :: Struct -> Result
transStruct x = case x of
  Structure id decs -> failure x
transDec :: Dec -> Result
transDec x = case x of
  DecSingle type_ id -> failure x
  DecConst type_ id -> failure x
  DecInit type_ id exp -> failure x
  DecInitConst type_ id exp -> failure x
transArgDec :: ArgDec -> Result
transArgDec x = case x of
  DecArg dec -> failure x
  DecArgNoName type_ -> failure x
  DecArgCNoName type_ -> failure x
transStmDec :: StmDec -> Result
transStmDec x = case x of
  DecVar dec -> failure x
  DecMultVar type_ id ids -> failure x
transStm :: Stm -> Result
transStm x = case x of
  SExpr exp -> failure x
  SStmDec stmdec -> failure x
  SReturn exp -> failure x
  SWhile exp stm -> failure x
  SDoWhile stm exp -> failure x
  SFor stmdec exp1 exp2 stm -> failure x
  SIf exp stm -> failure x
  SIfElse exp stm1 stm2 -> failure x
  SBlock stms -> failure x
  STDef tdef -> failure x
  SStruct struct -> failure x
transExp :: Exp -> Result
transExp x = case x of
  EInt integer -> failure x
  EDouble double -> failure x
  EChar char -> failure x
  EString strings -> failure x
  ETrue -> failure x
  EFalse -> failure x
  EConst qconst -> failure x
  EIndex id exp -> failure x
  ECall id exps -> failure x
  EMem exp1 exp2 -> failure x
  EFAccs exp1 exp2 -> failure x
  EPostInc exp -> failure x
  EPostDec exp -> failure x
  EPreInc exp -> failure x
  EPreDec exp -> failure x
  EDeref exp -> failure x
  ENot exp -> failure x
  ENeg exp -> failure x
  EMul exp1 exp2 -> failure x
  EDiv exp1 exp2 -> failure x
  EMod exp1 exp2 -> failure x
  EAdd exp1 exp2 -> failure x
  ESub exp1 exp2 -> failure x
  EShiftL exp1 exp2 -> failure x
  EShiftR exp1 exp2 -> failure x
  EGt exp1 exp2 -> failure x
  ELt exp1 exp2 -> failure x
  ELeq exp1 exp2 -> failure x
  EGeq exp1 exp2 -> failure x
  ENeq exp1 exp2 -> failure x
  EEq exp1 exp2 -> failure x
  EAnd exp1 exp2 -> failure x
  EOr exp1 exp2 -> failure x
  EAss exp1 exp2 -> failure x
  EAssDec exp1 exp2 -> failure x
  EAssInc exp1 exp2 -> failure x
  EIfElse exp1 exp2 exp3 -> failure x
  EThrow exp -> failure x
transConst :: Const -> Result
transConst x = case x of
  CTempl id types -> failure x
  CId id -> failure x
transQConst :: QConst -> Result
transQConst x = case x of
  QCon consts -> failure x
transType :: Type -> Result
transType x = case x of
  TInt -> failure x
  TDouble -> failure x
  TVoid -> failure x
  TBool -> failure x
  TConst qconst -> failure x
  TRef type_ -> failure x

