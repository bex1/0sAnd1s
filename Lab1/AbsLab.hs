

module AbsLab where

-- Haskell module generated by the BNF converter




newtype Id = Id String deriving (Eq, Ord, Show, Read)
data Program = Prog [Def]
  deriving (Eq, Ord, Show, Read)

data Def
    = DFun Fun
    | DInlFun Fun
    | DTDef TDef
    | DVar StmDec
    | DStruct Struct
    | DUsing QConst
  deriving (Eq, Ord, Show, Read)

data Fun = FProto Type Id [ArgDec] | FDef Type Id [ArgDec] [Stm]
  deriving (Eq, Ord, Show, Read)

data TDef = Typedef Type Id
  deriving (Eq, Ord, Show, Read)

data Struct = Structure Id [Dec]
  deriving (Eq, Ord, Show, Read)

data Dec
    = DecSingle Type Id
    | DecConst Type Id
    | DecInit Type Id Exp
    | DecInitConst Type Id Exp
  deriving (Eq, Ord, Show, Read)

data ArgDec = DecArg Dec | DecArgNoName Type | DecArgCNoName Type
  deriving (Eq, Ord, Show, Read)

data StmDec = DecVar Dec | DecMultVar Type Id [Id]
  deriving (Eq, Ord, Show, Read)

data Stm
    = SExpr Exp
    | SStmDec StmDec
    | SReturn Exp
    | SWhile Exp Stm
    | SDoWhile Stm Exp
    | SFor StmDec Exp Exp Stm
    | SIf Exp Stm
    | SIfElse Exp Stm Stm
    | SBlock [Stm]
    | STDef TDef
    | SStruct Struct
  deriving (Eq, Ord, Show, Read)

data Exp
    = EInt Integer
    | EDouble Double
    | EChar Char
    | EString [String]
    | ETrue
    | EFalse
    | EConst QConst
    | EIndex Id Exp
    | ECall Id [Exp]
    | EMem Exp Exp
    | EFAccs Exp Exp
    | EPostInc Exp
    | EPostDec Exp
    | EPreInc Exp
    | EPreDec Exp
    | EDeref Exp
    | ENot Exp
    | ENeg Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | EMod Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | EShiftL Exp Exp
    | EShiftR Exp Exp
    | EGt Exp Exp
    | ELt Exp Exp
    | ELeq Exp Exp
    | EGeq Exp Exp
    | ENeq Exp Exp
    | EEq Exp Exp
    | EAnd Exp Exp
    | EOr Exp Exp
    | EAss Exp Exp
    | EAssDec Exp Exp
    | EAssInc Exp Exp
    | EIfElse Exp Exp Exp
    | EThrow Exp
  deriving (Eq, Ord, Show, Read)

data Const = CTempl Id [Type] | CId Id
  deriving (Eq, Ord, Show, Read)

data QConst = QCon [Const]
  deriving (Eq, Ord, Show, Read)

data Type
    = TInt | TDouble | TVoid | TBool | TConst QConst | TRef Type
  deriving (Eq, Ord, Show, Read)

